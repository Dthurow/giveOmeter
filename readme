Have multiple characters with their own score and name. Each character is animated, and will move across the screen as they get a higher score. Once someone hits the winners name appears on the screen in big letters.


---------------------
Example start:

python ./main.py

If you have a custom config setting, start with:

python ./main.py customConfigNameHere

---------------------

Once it's started, use the up and down arrow to focus on a character, use left and right to increment or decrement that climber's score, then press enter to update the location of the climbers. 

Once one climber hits the winning score, The winners name appears on the screen in big letters. You can now only press ESC to exit the game, other keys are disabled.

To save the current state of the game, press 'S' key at any given time, and it'll save it in the folder the game was started in. Filename will be SavedFile[Time Saved]. E.g. SavedFile10:46:17.713941

To exit the game, either close the window, or press the ESC key.

---------------------

BASIC CODE SET UP

main.py -- shockingly, main file with main game loop
eventHandling.py -- reads input from wherever, returns list of events that have happened since it was last called
display.py -- code to display the climber, aka sprites, current score, climber names
GlobalConstants.py -- what it says on the tin
CharacterClasses.py -- The main classes for the game: Climber, Counter, GameState
SpriteImages Folder -- Where the sprites are stored
BaseSettings -- where the basic settings for the game are stored, in JSON format. Format is (replace [DESCRIPTION HERE] with real values, see the file for an example):

{"WinningScore": [SCORE TO WIN THE GAME], "Climbers": [["[NAME OF TEAM]", "[FOLDER CONTAINING SPRITES]]", [START SCORE]], [MORE CLIMBERS GO HERE IN SAME FORMAT AS FIRST] ]}

See the baseSettings file to see an example of this.

The initial location of each climber is calculated based on the global constants: TEXT_HEIGHT, SPRITE_HEIGHT, GAMEBORDER_LEFT

---------------------

PLANNED UPDATES (in no particular order)

With the eventHandling abstracted out, it can potentially be updated to use a more interesting input, such as a joystick/button combo.


Add background image to the game

Add background music